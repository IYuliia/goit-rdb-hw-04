1.b. CREATE TABLE authors 
(author_id INT PRIMARY KEY AUTO_INCREMENT,
author_name VARCHAR(255));


1.c. CREATE TABLE genres 
(genre_id INT PRIMARY KEY AUTO_INCREMENT,
genre_name VARCHAR(255))


1.d. CREATE TABLE books 
(book_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(255),
publication_year YEAR,
author_id INT, FOREIGN KEY (author_id) REFERENCES authors(author_id),
genre_id INT, FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
)


1.e. CREATE TABLE users 
(user_id INT PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(45),
email VARCHAR(45)
)


1.f. CREATE TABLE borrowed_books 
(borrow_id INT PRIMARY KEY AUTO_INCREMENT,
book_id INT, FOREIGN KEY (book_id) REFERENCES books(book_id),
user_id INT, FOREIGN KEY (user_id) REFERENCES users(user_id),
borrow_date DATE,
return_date DATE
)


2. INSERT INTO authors (author_name) VALUES ('Ernest Hemingway');
INSERT INTO authors (author_name) VALUES ('Mark Twain');
INSERT INTO authors (author_name) VALUES ('John Steinbeck')


INSERT INTO genres (genre_name) VALUES ('drama');
INSERT INTO genres (genre_name) VALUES ('adventure');
 INSERT INTO genres (genre_name) VALUES ('fantasy')


INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('abc', 1984, 1, 1);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('def', 1973, 2, 2);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('ghi', 1989, 3, 3)


INSERT INTO users (username, email) VALUES ('qwe', 'qwe123@gmail.com');
INSERT INTO users (username, email) VALUES ('asd', 'asd123@gmail.com');
INSERT INTO users (username, email) VALUES ('zxc', 'zxc123@gmail.com')


INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (1, 1, '2024-01-05, '2024-01-15');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (2, 2, '2024-02-05', '2024-02-15');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (3, 3, '2024-03-05', '2024-03-15')


3. USE mydb;
SELECT *
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;


4.1. SELECT COUNT(*)  FROM order_details INNER JOIN orders ON order_details.order_id = orders.id
    INNER JOIN customers ON orders.customer_id = customers.id
    INNER JOIN products ON order_details.product_id = products.id
    INNER JOIN categories ON products.category_id = categories.id
    INNER JOIN employees ON employees.employee_id= orders.employee_id
    INNER JOIN shippers ON shippers.id = orders.shipper_id
    INNER JOIN suppliers ON suppliers.id = products.supplier_id




4.2. SELECT COUNT(*)  FROM order_details INNER JOIN orders ON order_details.order_id = orders.id
    LEFT JOIN customers ON orders.customer_id = customers.id
    LEFT JOIN products ON order_details.product_id = products.id
    LEFT JOIN categories ON products.category_id = categories.id
    RIGHT JOIN employees ON employees.employee_id= orders.employee_id
    RIGHT JOIN shippers ON shippers.id = orders.shipper_id
    RIGHT JOIN suppliers ON suppliers.id = products.supplier_id
Кількість рядків не змінилася




4.3. use mydb;
SELECT * FROM order_details INNER JOIN orders ON order_details.order_id = orders.id
    LEFT JOIN customers ON orders.customer_id = customers.id
    LEFT JOIN products ON order_details.product_id = products.id
    LEFT JOIN categories ON products.category_id = categories.id
    RIGHT JOIN employees ON employees.employee_id= orders.employee_id
    RIGHT JOIN shippers ON shippers.id = orders.shipper_id
    RIGHT JOIN suppliers ON suppliers.id = products.supplier_id
    WHERE employees.employee_id > 3 AND employees.employee_id <= 10;
4.4. SELECT 
    categories.name AS category_name,
    COUNT(*) AS row_count,
    AVG(order_details.quantity) AS average_quantity
FROM 
    order_details
INNER JOIN 
    orders ON order_details.order_id = orders.id
LEFT JOIN 
    customers ON orders.customer_id = customers.id
LEFT JOIN 
    products ON order_details.product_id = products.id
LEFT JOIN 
    categories ON products.category_id = categories.id
RIGHT JOIN 
    employees ON employees.employee_id= orders.employee_id
RIGHT JOIN 
    shippers ON shippers.id = orders.shipper_id
RIGHT JOIN 
    suppliers ON suppliers.id = products.supplier_id
GROUP BY 
    categories.name;




4.5. SELECT 
    categories.name AS category_name,
    AVG(order_details.quantity) AS average_quantity
FROM 
    order_details
INNER JOIN 
    orders ON order_details.order_id = orders.id
LEFT JOIN 
    customers ON orders.customer_id = customers.id
LEFT JOIN 
    products ON order_details.product_id = products.id
LEFT JOIN 
    categories ON products.category_id = categories.id
RIGHT JOIN 
    employees ON employees.employee_id= orders.employee_id
RIGHT JOIN 
    shippers ON shippers.id = orders.shipper_id
RIGHT JOIN 
    suppliers ON suppliers.id = products.supplier_id
GROUP BY 
    categories.name
HAVING 
    AVG(order_details.quantity) > 21;


4.6. USE mydb;
SELECT categories.name AS category_name,
    AVG(order_details.quantity) AS average_quantity
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
LEFT JOIN customers ON orders.customer_id = customers.id
LEFT JOIN products ON order_details.product_id = products.id
LEFT JOIN categories ON products.category_id = categories.id
RIGHT JOIN employees ON employees.employee_id= orders.employee_id
RIGHT JOIN shippers ON shippers.id = orders.shipper_id
RIGHT JOIN suppliers ON suppliers.id = products.supplier_id
GROUP BY categories.name
ORDER BY average_quantity DESC;


4.7. USE mydb;
SELECT category_name, average_quantity
FROM (
    SELECT categories.name AS category_name,
        AVG(order_details.quantity) AS average_quantity
    FROM order_details
    INNER JOIN orders ON order_details.order_id = orders.id
    LEFT JOIN customers ON orders.customer_id = customers.id
    LEFT JOIN products ON order_details.product_id = products.id
    LEFT JOIN categories ON products.category_id = categories.id
    RIGHT JOIN employees ON employees.employee_id= orders.employee_id
    RIGHT JOIN shippers ON shippers.id = orders.shipper_id
    RIGHT JOIN suppliers ON suppliers.id = products.supplier_id
    GROUP BY categories.name
    ORDER BY average_quantity DESC
) AS data
LIMIT 4
OFFSET 1;